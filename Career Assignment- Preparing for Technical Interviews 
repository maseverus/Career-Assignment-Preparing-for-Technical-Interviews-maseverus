// Time Complexity: O(n) - Go through the numbers once.
// Space Complexity: O(n) - Save each number in the hash map.



function twoSum(nums, target) { 
    // 1. First I made an empty hash map to keep track of numbers I've already seen and their positions in the array.
    const hashMap = {};
        // 2. Then, loop through each element in the array.
    for (let i = 0; i < nums.length; i++) {
        // 3. Find the number needed to reach the target sum.
        // complement = target - the current number.
        const complement = target - nums[i];
            // 4. Then, check if this complement is already in the hash map.
            // If it is, the two numbers that add up to the target have been found.
        if (hashMap.hasOwnProperty(complement)) {
            // 5. Now, return the indexes of the complement and the current number.
            return [hashMap[complement], i];
        }
            // 6. If the complement is missing, save the current number and its index in the hash map.
        hashMap[nums[i]] = i;
    }
        // 7. If no solution is found, return an empty array (usually there is one).
    return [];
}



// Tests with different cases/edge cases
console.log(twoSum([3, 2, 4], 6)); 
    // Output: [1, 2]
console.log(twoSum([1, 2], 3)); 
    // Output: [0, 1]
console.log(twoSum([-1, 2, -3, 4], -5)); 
    // Output: [0, 2]
console.log(twoSum([3, 3], 6)); 
    // Output: [0, 1]